# Git Development Guide - Vegia Product Service
# Last updated: 2025-10-16

## BRANCH STRATEGY

### Branch Types
- main: Production-ready code (protected)
- dev: Development integration branch  
- feature/*: New features
- hotfix/*: Critical production fixes
- bugfix/*: Non-critical bug fixes

### Branch Naming Convention
# Features: feature/user-authentication, feature/add-product-search
# Bug fixes: bugfix/fix-login-error  
# Hotfixes: hotfix/critical-security-fix

## COMMIT GUIDELINES

### Commit Message Format
<type>: <short description>

<detailed description (if needed)>

### Commit Types
- feat: New feature
- fix: Bug fix  
- docs: Documentation changes
- refactor: Code refactoring
- test: Adding or updating tests
- chore: Maintenance tasks

### Examples
✅ GOOD: feat: add user authentication endpoint
✅ GOOD: fix: resolve null reference in product service  
❌ BAD: update (Too vague)
❌ BAD: fixed stuff (Unclear)

## DAILY WORKFLOW

### Start Your Day
git checkout dev
git pull origin dev
git checkout -b feature/your-task-name

### During Development  
git add .
git commit -m \"feat: description\"
git push -u origin feature/your-task-name

### Complete Your Task
dotnet test
dotnet build
git push
# Create PR on GitHub

## PULL REQUEST PROCESS

### PR Checklist
[ ] Code follows project standards
[ ] Self-reviewed my code  
[ ] Tests added/updated
[ ] Documentation updated
[ ] Build passes (dotnet build)
[ ] All tests pass (dotnet test)

### PR URL
https://github.com/RazaSandhu410/vegia-product-service/pull/new/your-branch

## MERGE STRATEGIES

### Merge via Command Line
git checkout dev
git pull origin dev
git merge feature/your-branch
git push origin dev
git branch -d feature/your-branch
git push origin --delete feature/your-branch

## BEST PRACTICES

### Code Quality Checks
dotnet build    # Ensure solution builds
dotnet test     # Run tests before committing

### Commit Frequency
✅ DO: Small, focused commits
✅ DO: Commit working code  
✅ DO: Write descriptive messages
❌ DON'T: Commit broken code
❌ DON'T: Giant commits with multiple features

## TROUBLESHOOTING

### Common Issues

1. Merge Conflicts:
   git status                 # See conflicted files
   # Edit files, resolve conflicts
   git add .                  
   git commit -m \"resolve merge conflicts\"

2. Wrong Branch:
   git stash                  # Save changes
   git checkout correct-branch
   git stash pop              # Apply changes

3. Accidental Commit:
   git reset --soft HEAD~1    # Undo commit, keep changes

## QUICK START FOR NEW TEAM MEMBERS

### First Time Setup
git clone https://github.com/RazaSandhu410/vegia-product-service.git
cd vegia-product-service
git checkout dev
git pull origin dev
git checkout -b feature/your-first-task

### Daily Commands
# Start: git checkout dev && git pull && git checkout -b feature/task
# Work: git add . && git commit -m \"type: description\" && git push -u origin feature/task  
# Finish: Create PR on GitHub → Review → Merge → Delete branch

## ESSENTIAL COMMANDS

### Branch Management
git branch -a                          # List all branches
git checkout -b feature/name           # Create and switch
git branch -d branch-name              # Delete local branch
git push origin --delete branch-name   # Delete remote branch

### Daily Workflow
git status                            # Check status
git add .                            # Stage changes  
git commit -m \"message\"              # Commit changes
git push -u origin branch-name       # Push and set upstream

### Synchronization
git pull origin branch-name          # Fetch and merge
git fetch --prune                    # Clean up remote branches

### History & Inspection
git log --oneline --graph -10        # Compact history
git diff                             # See changes
git show commit-hash                 # Show specific commit

## PROJECT-SPECIFIC COMMANDS

### Build and Test
dotnet build                         # Build solution
dotnet test                         # Run all tests
dotnet run --project Services/ProductService/Vegia.ProductService.API  # Run API

### Navigation
cd Services/ProductService           # Navigate to product service
cd Vegia.ProductService.API          # Navigate to API project

## QUICK REFERENCE CARD

### Feature Development Flow
1. git checkout dev && git pull
2. git checkout -b feature/task-name  
3. Code + git add . + git commit -m \"type: desc\"
4. git push -u origin feature/task-name
5. Create PR on GitHub → Review → Merge
6. git branch -d feature/task-name

### Commit Types Quick Reference
feat - New functionality
fix - Bug repairs  
docs - Documentation
refactor - Code restructuring
test - Test additions
chore - Maintenance tasks

### Project Structure
VegiaProductService/
├── Services/ProductService/
│   ├── Vegia.ProductService.API/       # Web API
│   ├── Vegia.ProductService.Core/      # Entities & Interfaces  
│   ├── Vegia.ProductService.DAL/       # Data Access
│   ├── Vegia.ProductService.BLL/       # Business Logic
│   ├── Vegia.ProductService.Reports/   # Reporting
│   └── Vegia.ProductService.Tests/     # Unit Tests
└── Documentation/

---
SUPPORT: Check this guide first, then ask team members
GitHub: https://github.com/RazaSandhu410/vegia-product-service
Happy Coding! 🚀
